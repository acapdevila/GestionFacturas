@page
@using Microsoft.AspNetCore.Http.Extensions
@using GestionFacturas.Dominio
@using GestionFacturas.Web.Pages.Clientes
@using System.Web
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model ListaGestionFacturasModel
@{
    ViewData["Title"] = "Facturas";
}

<div class="row">
    <nav id="sidebarMenu" class="col-sm-12 col-md-3 col-lg-2 d-md-block bg-light border-end">
        <div class="position-sticky pt-3">

            <div id="toolbar1" class="toolbar">
                <div class="row g-3">

                    <div class="col-12">
                        <label asp-for="NombreOEmpresa">Descripción/Cliente</label>
                        <input type="text" asp-for="NombreOEmpresa" class="form-control" placeholder="Nombre cliente...">
                    </div>

                    <div class="col-12">
                        <label asp-for="Desde">Desde</label>
                        <input asp-for="Desde" type="date" class="form-control" poster="Desde" placeholder="Desde">

                    </div>
                    <div class="col-12">
                        <label asp-for="Hasta">Hasta</label>
                        <input asp-for="Hasta" type="date" class="form-control" poster="Hasta" placeholder="Hasta">

                    </div>

                    <div class="col-12">
                        <label asp-for="Orden">Ordenar por</label>
                        <select asp-for="Orden" class="form-select" asp-items="Html.GetEnumSelectList<OrdenFacturas>()">
                            
                        </select>
                    </div>
                    <div class="col-12">
                        <label asp-for="EstadoFactura">Estado</label>
                        <select asp-for="EstadoFactura" class="form-select" asp-items="Html.GetEnumSelectList<EstadoFacturaEnum>()">
                            <option value="">Todos</option>
                        </select>
                    </div>

                </div>
            </div>
        </div>
    </nav>

    <div class="col-sm-12 col-md-9 col-lg-10">

        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
            <h2 class="h2">
                <svg class="bi" width="24" height="24">
                    <use xlink:href="#bi-list-task"></use>
                </svg>
                @ViewData["Title"]
            </h2>
            <div class="btn-toolbar mb-2 mb-md-0">

                <a class="btn btn-outline-primary"
                   asp-page="@CrearFacturaModel.NombrePagina">
                    <i class="bi bi-plus"></i>
                    Nueva factura
                </a>
                &nbsp;
                <a asp-action="DescargarZip" asp-controller="DescargasFacturas" class="btn btn-outline-secondary"
                   onclick="DescargarZip();return false;">
                    Descargar Zip
                </a>
                &nbsp;
                <a asp-action="DescargarExcel" asp-controller="DescargasFacturas" class="btn btn-outline-secondary"
                   onclick="DescargarExcel();return false;">
                    Descargar Excel
                </a>
             

            </div>
        </div>


        <div class="table-responsive">
            <table id="tablaAcciones"
                   class="table table-striped table-sm">
                <thead>
                <tr>
                    <th scope="col" data-field="@nameof(LineaListaGestionFacturas.Id)" data-visible="false" data-serchable="false">ID</th>
                    <th scope="col" data-field="@nameof(LineaListaGestionFacturas.NumeroFactura)" data-formatter="detallesFormatter" data-width="50">Factura</th>
                    <th scope="col" data-field="@nameof(LineaListaGestionFacturas.FechaEmisionFactura)" data-width="50">Fecha</th>
                    <th scope="col" data-field="@nameof(LineaListaGestionFacturas.CompradorNombreOEmpresa)" data-width="30" data-width-unit="%" data-formatter="clienteFormatter">Cliente</th>
                    <th scope="col" data-field="@nameof(LineaListaGestionFacturas.DescripcionPrimeraLinea)" data-width="70" data-width-unit="%">Descripción</th>
                    <th scope="col" data-field="@nameof(LineaListaGestionFacturas.EstadoFactura)" data-footer-formatter="etiquetaTotalFormatter" data-formatter="estadoFormatter" data-width="50">Estado</th>
                    <th scope="col" data-field="@nameof(LineaListaGestionFacturas.EnviadaAHacienda)" data-formatter="enviadaAHaciendaFormatter" data-width="50">Enviada a Hacienda</th>
                    <th scope="col" data-field="@nameof(LineaListaGestionFacturas.BaseImponible)" data-footer-formatter="totalFormatter" data-formatter="priceFormatter" data-width="50">BI</th>
                    <th scope="col" data-field="@nameof(LineaListaGestionFacturas.Impuestos)" data-footer-formatter="totalFormatter" data-formatter="priceFormatter" data-width="50">IVA</th>
                    <th scope="col" data-field="@nameof(LineaListaGestionFacturas.ImporteTotal)" data-footer-formatter="totalFormatter" data-formatter="priceFormatter" data-width="50">Total</th>
                    <th data-field="acciones" data-formatter="accionesFormatter" data-width="100" data-sortable="false">Acciones</th>

                </tr>
                </thead>

            </table>
        </div>
    </div>
</div>

@*<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalCambiarEstadoFactura">
    Launch demo modal
</button>*@


<div class="modal" id="modalCambiarEstadoFactura" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Cambiar estado factura</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
               
            </div>
            <div class="modal-body">
                <form id="formCambiarEstado">

                    @Html.HiddenFor(m => m.EditorEstadoFactura.IdFactura, htmlAttributes: new { id = "recipient-idFactura" })
                    @Html.HiddenFor(m => m.EditorEstadoFactura.NumeroFactura, htmlAttributes: new { id = "recipient-numeroFactura" })
                    <div class="form-group">
                        <label for="recipient-numeroFactura" class="control-label" id="Factura">Factura</label>
                        @Html.TextBox("numeroFacturaDeshabilitado", "", htmlAttributes: new { @class = "form-control", id = "recipient-numeroFacturaDeshabilitado", disabled = "disabled" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.EditorEstadoFactura.EstadoFactura, htmlAttributes: new {@class = "control-label", @for = "recipient-estadoFactura"})
                        <select id="recipient-estadoFactura" asp-for="EditorEstadoFactura.EstadoFactura" class="form-select" asp-items="Html.GetEnumSelectList<EstadoFacturaEnum>()">
                            
                        </select>
                        @Html.ValidationMessageFor(model => model.EditorEstadoFactura.EstadoFactura, "", new {@class = "text-danger"})
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                @*<button type="button" class="btn btn-default" data-dismiss="modal">Cerrar</button>*@
                <button type="button" id="btnGuardar" class="btn btn-primary">Guardar</button>



            </div>
        </div>
    </div>
</div>

@section scripts
{
    <partial name="_BootstrapTableScripts"/>


    <script>
        const returnUrl = "ReturnUrl=@HttpContext.Request.GetEncodedPathAndQuery()";
              
        function refrescar() {
            guardarEstadoFiltros('#toolbar1');
            $("#tablaAcciones").bootstrapTable('refresh');
        }

        function initTable() {

            $("#@Html.IdFor(m => m.NombreOEmpresa)").change(refrescar).val(recuperaInputFiltro);
            $("#@Html.IdFor(m => m.Desde)").change(refrescar).val(recuperaInputFiltro);
            $("#@Html.IdFor(m => m.Hasta)").change(refrescar).val(recuperaInputFiltro);
            $("#@Html.IdFor(m => m.Orden)").change(refrescar).val(recuperaInputFiltro);
            $("#@Html.IdFor(m => m.EstadoFactura)").change(refrescar).val(recuperaInputFiltro);

            $("#tablaAcciones").bootstrapTable({
                //toolbar:"#toolbar1",
                //search: false,
                url: "@Url.Action("Buscar", "GridFacturas")",
                showFooter: true
            });
            
            @if (!string.IsNullOrEmpty(Model.NombreOEmpresa))
            {
                <text>refrescar()</text>
            }
        }

    </script>

    <script>

        $(document).ready(function () {
                                 
            initTable();
        });

        function accionesFormatter(value, row, index) {

            return [
                '<div class="btn-group text-center">',
                '<a class="btn btn-outline-primary" href="@EditarFacturaModel.NombrePagina/' + row.Id + ' ? ' + returnUrl + '">Editar</a>',
                '<button type="button" class="btn btn-outline-primary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">',
                '<span class="visually-hidden">Toggle Dropdown</span>',
                '</button>',
                '<ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">',
                //'<li><a class="dropdown-item" href="@DetallesFacturaModel.NombrePagina/' + row.Id + '?' + returnUrl + '">Detalles</a></li>',
                //'<li><a class="dropdown-item" href="@EditarFacturaModel.NombrePagina/' + row.Id + ' ? ' + returnUrl + '">Editar</a></li>',
                '<li><a class="dropdown-item" href="DescargasFacturas/Descargar/' + row.Id + '">Descargar</a></li>',
                '<li><a class="dropdown-item" href="@CrearFacturaModel.NombrePagina/?id=' + row.Id + '&' + returnUrl + '">Duplicar</a></li>',
                '<li><a class="dropdown-item" href="@EnviarFacturaPorEmailModel.NombrePagina/' + row.Id + '?' + returnUrl + '"> Enviar</a></li>',
               @* '<li><a class="dropdown-item" href="@EnviarFacturaPorEmailModel.NombrePagina/' + row.Id + '?' + returnUrl + '"><i class="bi bi-trash text-danger"></i> Eliminar</a></li>',
               *@'</ul>',
                '</div>'
            ].join('');
                                  

        }
        
         function clienteFormatter(value, row, index) {

              return [
                '<a class="btn btn-link" href="@EditarClienteModel.NombrePagina/' + row.@(nameof(LineaListaGestionFacturas.IdComprador)) + '?' + returnUrl + '">'+value+'</a>'               
            ].join(''); 

        }

        function detallesFormatter(value, row, index) {

            return [
                '<a class="btn btn-link" href="@DetallesFacturaModel.NombrePagina/' + row.Id + '?' + returnUrl + '">'+value+'</a>'               
            ].join('');
        }

        function totalFormatter(data) {
            var field = this.field
            return data.map(function (row) {
                return +row[field]
                }).reduce(function (sum, i) {
                    return sum + i
            }, 0).toLocaleString('es-ES', {
                style: 'currency',
                currency: 'EUR',
            })
        }

        function etiquetaTotalFormatter() {
            return 'Total'
        }

        function priceFormatter(value) {
            return value.toLocaleString('es-ES', {
                style: 'currency',
                currency: 'EUR',
            })
        }

        function obtenerCssClasePorEstadoFactura(estadoFactura) {
            if (estadoFactura === 1) {
                return "default";
            } else if (estadoFactura === 2 || estadoFactura === 6) {
                return "warning";
            } else if (estadoFactura === 3) {
                return "success";
            } else if (estadoFactura === 4) {
                return "danger";
            }
            else if (estadoFactura === 5) {
                return "secondary";
            }
            return "";
        }

        function obtenerTextoEstadoFactura(estadoFactura) {
            if (estadoFactura === 1) {
                return '@EstadoFacturaEnum.Borrador';
            } else if (estadoFactura === 2) {
                return "@EstadoFacturaEnum.Enviada";
            } else if (estadoFactura === 3) {
                return "@EstadoFacturaEnum.Cobrada";
            } else if (estadoFactura === 4) {
                return "@EstadoFacturaEnum.Impagada";
            }
            else if (estadoFactura === 6) {
                return "@EstadoFacturaEnum.EnviadaAHacienda";
            }
            else if (estadoFactura === 5) {
                return "@Html.Raw(EstadoFacturaEnum.Rectificación.ToString())";
                
            }
            return "";
        }

        function etiquetaTotalFormatter() {
            return 'Total'
        }

        function enviadaAHaciendaFormatter(value, row, index) {
            if (value) {
                return '<i class="bi bi-check-circle-fill text-success" title="Enviada a Hacienda"></i>';
            } else {
                return '<i class="bi bi-x-circle text-muted" title="No enviada"></i>';
            }
        }

        function estadoFormatter(value, row, index) {
            var cssEstado = obtenerCssClasePorEstadoFactura(value);
            var texto = obtenerTextoEstadoFactura(value);
            var element = crearBotonEstadoFactura(row.Id, row.NumeroFactura, value, texto);
            //alert(element.outerHtml);
            //var stringElement = element.outerHtml;
            var numFactura = row.NumeroFactura;
            return  [
                '<div id="contenedorBotonEstadoFactura'+ row.Id +'">',
                  element.outerHTML,
                  '</div>'
            ].join('');
            
             }
    </script>
    
    <!-- Modal -->



    <script type="text/javascript">

        function crearBotonEstadoFactura(idFactura, numeroFactura, estadoFactura, textoBotton) {

            var element = document.createElement("button");
            element.type = "button";

            var t = document.createTextNode(textoBotton);
            element.appendChild(t);

            element.className = "btn btn-" + obtenerCssClasePorEstadoFactura(estadoFactura) + " btn-xs";

            element.setAttribute("data-idfactura", idFactura);
            element.setAttribute("data-numerofactura", numeroFactura);
            element.setAttribute("data-estadofactura", estadoFactura);
            element.setAttribute("data-bs-toggle", "modal");
            element.setAttribute("data-bs-target", "#modalCambiarEstadoFactura");
            return element;
        }

        function eliminarBotonEstadoFactura(idFactura) {
            $("#contenedorBotonEstadoFactura" + idFactura).empty();
        }
        

    $(document).ready(function () {
    
        $('#modalCambiarEstadoFactura').on('show.bs.modal', function(event) {

            var button = $(event.relatedTarget); // Button that triggered the modal
            var idFactura = button.data('idfactura'); // Extract info from data-* attributes
            var numeroFactura = button.data('numerofactura');
            var estadoFactura = button.data('estadofactura');
            var modal = $(this);
            modal.find('#recipient-idFactura').val(idFactura);
            modal.find('#recipient-numeroFactura').val(numeroFactura);
            modal.find('#recipient-numeroFacturaDeshabilitado').val(numeroFactura);
            modal.find('#recipient-estadoFactura').val(estadoFactura);
        });

        $("#btnGuardar").click(function (event) {

            $(this).val('Guardando...').prop('disabled', true);

            event.preventDefault();

            guardar();
        });

        function guardar() {
            $.ajax({
                type: "POST",
                url: "@Url.Action("CambiarEstado", "CambiarEstadoFactura")",
                data: $("#formCambiarEstado").serialize(),
                dataType: "json"
            }).done(function(data) {

                $("#btnGuardar")
                    .val("Guardar")
                    .prop('disabled', false);

                eliminarBotonEstadoFactura(data.IdFactura);
                var element = crearBotonEstadoFactura(data.IdFactura,data.NumeroFactura, data.EstadoFactura, data.TextoEstadoFactura);
                var contenedor = document.getElementById("contenedorBotonEstadoFactura" + data.IdFactura);
                contenedor.appendChild(element);

                $('#modalCambiarEstadoFactura').modal('hide');

            }).fail(function() {
                    alert("Se ha producido un error inesperado.");
                    return false;
                }
            );
        }


    });


        function DescargarZip() {
            window.location = '@Url.Action("DescargarZip", "DescargasFacturas")?' + queryStringFiltros();
        }

        function DescargarExcel() {
            window.location = '@Url.Action("DescargarExcel", "DescargasFacturas")?' + queryStringFiltros();
        }

        function queryStringFiltros() {
             var params = obtenerDatosFiltros('#toolbar1');
             var queryString = $.param(params);
             return queryString;

        }

    </script>

}

